//! Post-processing step implementations
//!
//! This module contains implementations of various post-processing steps
//! that can be applied to 3D assets.

#[cfg(feature = "calc-tangent-spaces")]
pub mod calc_tangent_spaces;
#[cfg(feature = "find-degenerates")]
pub mod find_degenerates;
#[cfg(feature = "find-invalid-data")]
pub mod find_invalid_data;
#[cfg(feature = "gen-normals")]
pub mod gen_normals;
#[cfg(feature = "gen-smooth-normals")]
pub mod gen_smooth_normals;
#[cfg(feature = "join-identical-vertices")]
pub mod join_identical_vertices;
#[cfg(feature = "optimize-graph")]
pub mod optimize_graph;
#[cfg(feature = "optimize-meshes")]
pub mod optimize_meshes;
#[cfg(feature = "remove-redundant-materials")]
pub mod remove_redundant_materials;
#[cfg(feature = "triangulate")]
pub mod triangulate;
#[cfg(feature = "validate-data-structure")]
pub mod validate_data_structure;

// Additional features
#[cfg(feature = "debone")]
pub mod debone;
#[cfg(feature = "drop-normals")]
pub mod drop_normals;
#[cfg(feature = "embed-textures")]
pub mod embed_textures;
#[cfg(feature = "find-instances")]
pub mod find_instances;
#[cfg(feature = "fix-infacing-normals")]
pub mod fix_infacing_normals;
#[cfg(feature = "flip-uvs")]
pub mod flip_uvs;
#[cfg(feature = "flip-winding-order")]
pub mod flip_winding_order;
#[cfg(feature = "force-gen-normals")]
pub mod force_gen_normals;
#[cfg(feature = "gen-bounding-boxes")]
pub mod gen_bounding_boxes;
#[cfg(feature = "gen-uv-coords")]
pub mod gen_uv_coords;
#[cfg(feature = "global-scale")]
pub mod global_scale;
#[cfg(feature = "improve-cache-locality")]
pub mod improve_cache_locality;
#[cfg(feature = "limit-bone-weights")]
pub mod limit_bone_weights;
#[cfg(feature = "make-left-handed")]
pub mod make_left_handed;
#[cfg(feature = "populate-armature-data")]
pub mod populate_armature_data;
#[cfg(feature = "pre-transform-vertices")]
pub mod pre_transform_vertices;
#[cfg(feature = "remove-component")]
pub mod remove_component;
#[cfg(feature = "sort-by-p-type")]
pub mod sort_by_p_type;
#[cfg(feature = "split-by-bone-count")]
pub mod split_by_bone_count;
#[cfg(feature = "split-large-meshes")]
pub mod split_large_meshes;
#[cfg(feature = "transform-uv-coords")]
pub mod transform_uv_coords;

// Re-export all step implementations (only if features are enabled)
#[cfg(feature = "calc-tangent-spaces")]
pub use calc_tangent_spaces::CalcTangentSpaces;
#[cfg(feature = "find-degenerates")]
pub use find_degenerates::FindDegenerates;
#[cfg(feature = "find-invalid-data")]
pub use find_invalid_data::FindInvalidData;
#[cfg(feature = "gen-normals")]
pub use gen_normals::GenNormals;
#[cfg(feature = "gen-smooth-normals")]
pub use gen_smooth_normals::GenSmoothNormals;
#[cfg(feature = "join-identical-vertices")]
pub use join_identical_vertices::JoinIdenticalVertices;
#[cfg(feature = "optimize-graph")]
pub use optimize_graph::OptimizeGraph;
#[cfg(feature = "optimize-meshes")]
pub use optimize_meshes::OptimizeMeshes;
#[cfg(feature = "remove-redundant-materials")]
pub use remove_redundant_materials::RemoveRedundantMaterials;
#[cfg(feature = "triangulate")]
pub use triangulate::Triangulate;
#[cfg(feature = "validate-data-structure")]
pub use validate_data_structure::ValidateDataStructure;

// Additional feature re-exports
#[cfg(feature = "debone")]
pub use debone::Debone;
#[cfg(feature = "drop-normals")]
pub use drop_normals::DropNormals;
#[cfg(feature = "embed-textures")]
pub use embed_textures::EmbedTextures;
#[cfg(feature = "find-instances")]
pub use find_instances::FindInstances;
#[cfg(feature = "fix-infacing-normals")]
pub use fix_infacing_normals::FixInfacingNormals;
#[cfg(feature = "flip-uvs")]
pub use flip_uvs::FlipUVs;
#[cfg(feature = "flip-winding-order")]
pub use flip_winding_order::FlipWindingOrder;
#[cfg(feature = "force-gen-normals")]
pub use force_gen_normals::ForceGenNormals;
#[cfg(feature = "gen-bounding-boxes")]
pub use gen_bounding_boxes::GenBoundingBoxes;
#[cfg(feature = "gen-uv-coords")]
pub use gen_uv_coords::GenUVCoords;
#[cfg(feature = "global-scale")]
pub use global_scale::GlobalScale;
#[cfg(feature = "improve-cache-locality")]
pub use improve_cache_locality::ImproveCacheLocality;
#[cfg(feature = "limit-bone-weights")]
pub use limit_bone_weights::LimitBoneWeights;
#[cfg(feature = "make-left-handed")]
pub use make_left_handed::MakeLeftHanded;
#[cfg(feature = "populate-armature-data")]
pub use populate_armature_data::PopulateArmatureData;
#[cfg(feature = "pre-transform-vertices")]
pub use pre_transform_vertices::PreTransformVertices;
#[cfg(feature = "remove-component")]
pub use remove_component::RemoveComponent;
#[cfg(feature = "sort-by-p-type")]
pub use sort_by_p_type::SortByPType;
#[cfg(feature = "split-by-bone-count")]
pub use split_by_bone_count::SplitByBoneCount;
#[cfg(feature = "split-large-meshes")]
pub use split_large_meshes::SplitLargeMeshes;
#[cfg(feature = "transform-uv-coords")]
pub use transform_uv_coords::TransformUVCoords;
